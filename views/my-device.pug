html
  head
    title Device Settings for #{device_id}
    link(rel="stylesheet", href="/styles.css")
  body
    h1 Device: #{device_id}

    .device-container
      .device-settings
        h3 Device Settings

        // LED Status as Checkbox
        label
          input(type="checkbox", id="ledCheckbox", checked= device && device.IsLedTurnOff === false)
          | LED Status

        // RGB Status as Checkbox
        label
          input(type="checkbox", id="rgbCheckbox", checked= device && device.IsRGBTurnOff === false)
          | RGB Status

        // Buzzer Status as Checkbox
        label
          input(type="checkbox", id="buzzerCheckbox", checked= device && device.IsBuzzerTurnOff === false)
          | Buzzer Status


        label Transmit Frequency:
        input(type="range", id="freqSlider", min="1", max="60", value= device && device.transmit_frequency, step="1")
        span#freqValue= device && device.transmit_frequency


        button(type="button", id="submitBtn") Save Changes


    .message.success(style="display:none;")
      p Successfully changed the device settings!


    script.
      document.getElementById('submitBtn').addEventListener('click', async () => {
        const device_id = window.location.search.split('=')[1]; // Extract device_id from the URL

        // Get the current values of checkboxes and slider
        const ledStatus = !document.getElementById('ledCheckbox').checked;  // Inverted to match expected value
        const rgbStatus = !document.getElementById('rgbCheckbox').checked;  // Inverted to match expected value
        const buzzerStatus = !document.getElementById('buzzerCheckbox').checked;  // Inverted to match expected value
        const transmitFrequency = document.getElementById('freqSlider').value;

        try {
          // Update the device settings in Firebase
          await axios.put(`${firebaseUrl}/devices/${device_id}.json?auth=${firebaseSecret}`, {
            IsLedTurnOff: ledStatus,
            IsRGBTurnOff: rgbStatus,
            IsBuzzerTurnOff: buzzerStatus,
            transmit_frequency: transmitFrequency,
          });

          // Show success message
          document.querySelector('.message.success').style.display = 'block';


          setTimeout(() => {
            location.reload();
          }, 2000);
        } catch (error) {
          console.error('Error saving device settings:', error);
          alert('Error saving device settings');
        }
      });

      // Update slider value display as the slider is moved
      const freqSlider = document.getElementById('freqSlider');
      const freqValue = document.getElementById('freqValue');
      freqSlider.addEventListener('input', () => {
        freqValue.textContent = freqSlider.value;
      });
